"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const response_1 = require("./response");
class VideoResource extends response_1.GenericResponse {
    get typeName() {
        return 'Video';
    }
    get type() {
        return response_1.ResponseType.video;
    }
    constructor(scenario, response) {
        super(scenario, response);
        this.context.assert('HTTP Status OK', this.statusCode).between(200, 299);
        this.context.assert('MIME Type matches expected value for video', this.header('Content-Type')).matches(/(video|mpegurl)/i);
    }
    evaluate(context, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Evaluate does not support video resources.');
        });
    }
    asyncSelect(path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Video Response does not yet support select');
        });
    }
    asyncSelectAll(path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Video Response does not yet support selectAll');
        });
    }
}
exports.VideoResource = VideoResource;
//# sourceMappingURL=videoresource.js.map