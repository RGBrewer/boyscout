"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const util_1 = require("./util");
const isValidDataUrl = require("valid-data-url");
class Link {
    constructor(uri, context) {
        this._uri = uri;
        this._context = context;
    }
    getUri() {
        const baseUrl = this._context.scenario.buildUrl();
        const thisUrl = new url_1.URL(this._uri, baseUrl.href);
        if (typeof this._qs != "undefined") {
            const type = util_1.toType(this._qs);
            if (type == "object") {
                for (let key in this._qs) {
                    thisUrl.searchParams.append(key, this._qs[key]);
                }
            }
            else if (type == "array") {
                this._qs.forEach((item) => {
                    thisUrl.searchParams.append(item.name, item.value);
                });
            }
        }
        return thisUrl.href;
    }
    setQueryString(qs) {
        this._qs = qs;
    }
    isValidDataUri() {
        return isValidDataUrl(this._uri);
    }
    isData() {
        return /^data:/.test(this._uri);
    }
    isAnchor() {
        return /^#/.test(this._uri);
    }
    isEmail() {
        return /^mailto:/.test(this._uri);
    }
    isPhone() {
        return /^(tel|callto|wtai):/.test(this._uri);
    }
    isTextMessage() {
        return /^(sms|mms):/.test(this._uri);
    }
    isGeo() {
        return /^(geo|geopoint):/.test(this._uri);
    }
    isScript() {
        return /^(javascript):/.test(this._uri);
    }
    isAppStore() {
        return /^(market|itms|itms-apps):/.test(this._uri);
    }
    isFtp() {
        return /^(ftp):/.test(this._uri);
    }
    isNavigation() {
        return (this._uri.length > 0 &&
            !this.isAnchor() &&
            (/^\?/.test(this._uri) ||
                /^https?:\/\//i.test(this._uri) ||
                /^\//i.test(this._uri) ||
                !/^[a-z]+:\/\//i.test(this._uri)));
    }
}
exports.Link = Link;
//# sourceMappingURL=link.js.map