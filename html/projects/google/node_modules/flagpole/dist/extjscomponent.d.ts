import { iAssertionContext, iValue } from "./interfaces";
import { PuppeteerElement } from "./puppeteerelement";
export declare const ExtJsComponentTypes: {
    actionsheet: string;
    audio: string;
    button: string;
    image: string;
    label: string;
    loadmask: string;
    panel: string;
    segmentedbutton: string;
    sheet: string;
    spacer: string;
    titlebar: string;
    toolbar: string;
    video: string;
    carousel: string;
    navigationview: string;
    datepicker: string;
    picker: string;
    slider: string;
    thumb: string;
    tabpanel: string;
    viewport: string;
    dataview: string;
    list: string;
    nestedlist: string;
    checkboxfield: string;
    datepickerfield: string;
    emailfield: string;
    hiddenfield: string;
    numberfield: string;
    passwordfield: string;
    radiofield: string;
    searchfield: string;
    selectfield: string;
    sliderfield: string;
    spinnerfield: string;
    textfield: string;
    textareafield: string;
    togglefield: string;
    treelist: string;
    urlfield: string;
    fieldset: string;
    formpanel: string;
};
export declare class ExtJsComponent extends PuppeteerElement implements iValue {
    protected _path: string;
    get path(): string;
    get name(): string;
    protected get _component(): string;
    static create(referencePath: string, context: iAssertionContext, path: string): Promise<ExtJsComponent>;
    private constructor();
    getType(): Promise<iValue>;
    getId(): Promise<iValue>;
    getWidth(): Promise<iValue>;
    getHeight(): Promise<iValue>;
    getSize(): Promise<iValue>;
    getText(): Promise<iValue>;
    getValue(): Promise<iValue>;
    setValue(value: string): Promise<iValue>;
    setData(value: string): Promise<iValue>;
    getData(): Promise<iValue>;
    disable(): Promise<iValue>;
    enable(): Promise<iValue>;
    hide(): Promise<iValue>;
    show(): Promise<iValue>;
    focus(): Promise<iValue>;
    isHidden(): Promise<iValue>;
    isVisible(): Promise<iValue>;
    isEnabled(): Promise<iValue>;
    isDisabled(): Promise<iValue>;
    getProperty(propertyName: string): Promise<iValue>;
    call(method: string, ...args: any[]): Promise<iValue>;
    fireEvent(eventName: string): Promise<iValue>;
    click(): Promise<any>;
    protected _eval(js: string): Promise<any>;
}
