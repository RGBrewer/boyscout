"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const flagpoleexecutionoptions_1 = require("../flagpoleexecutionoptions");
const ansiAlign = require("ansi-align");
function printHeader() {
    if (flagpoleexecutionoptions_1.FlagpoleExecution.opts.quietMode) {
        return;
    }
    console.log("\u001b[0m \u001b[37m^\u001b[0m ");
    console.log("\u001b[0m \u001b[47m \u001b[0m \u001b[44m\u001b[37m ****** \u001b[41m                 \u001b[0m\u001b[37;1m\u001b[1m   F L A G P O L E   J S");
    console.log("\u001b[0m \u001b[47m \u001b[0m \u001b[44m\u001b[37m ****** \u001b[47m                 \u001b[0m");
    console.log("\u001b[0m \u001b[47m \u001b[0m \u001b[44m\u001b[37m ****** \u001b[41m                 \u001b[0m\u001b[238m   Version 2.2");
    console.log("\u001b[0m \u001b[47m \u001b[0m \u001b[47m                         \u001b[0m");
    console.log("\u001b[0m \u001b[47m \u001b[0m \u001b[41m                         \u001b[0m");
    console.log("\u001b[0m \u001b[47m \u001b[0m ");
}
exports.printHeader = printHeader;
function printOldHeader() {
    if (flagpoleexecutionoptions_1.FlagpoleExecution.opts.quietMode) {
        return;
    }
    console.log("\x1b[32m", `
        \x1b[31m $$$$$$$$\\ $$\\                                         $$\\           
        \x1b[31m $$  _____|$$ |                                        $$ |          
        \x1b[31m $$ |      $$ | $$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$\\  $$ | $$$$$$\\  
        \x1b[31m $$$$$\\    $$ | \\____$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |$$  __$$\\ 
        \x1b[37m $$  __|   $$ | $$$$$$$ |$$ /  $$ |$$ /  $$ |$$ /  $$ |$$ |$$$$$$$$ |
        \x1b[37m $$ |      $$ |$$  __$$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |$$   ____|
        \x1b[37m $$ |      $$ |\\$$$$$$$ |\\$$$$$$$ |$$$$$$$  |\\$$$$$$  |$$ |\\$$$$$$$\\ 
        \x1b[34m \\__|      \\__| \\_______| \\____$$ |$$  ____/  \\______/ \\__| \\_______|
        \x1b[34m                         $$\\   $$ |$$ |                              
        \x1b[34m                         \\$$$$$$  |$$ |                              
        \x1b[34m                          \\______/ \\__|`, "\x1b[0m", "\n");
}
exports.printOldHeader = printOldHeader;
function printSubheader(heading) {
    if (!flagpoleexecutionoptions_1.FlagpoleExecution.opts.quietMode) {
        console.log(ansiAlign.center("\x1b[31m===========================================================================\x1b[0m\n" +
            "\x1b[0m" +
            heading +
            "\n" +
            "\x1b[31m===========================================================================\x1b[0m\n"));
    }
}
exports.printSubheader = printSubheader;
function printLine(...messages) {
    if (!flagpoleexecutionoptions_1.FlagpoleExecution.opts.quietMode) {
        messages.forEach((message) => {
            console.log(message);
        });
    }
}
exports.printLine = printLine;
function trimInput(input) {
    return input.trim();
}
exports.trimInput = trimInput;
function stringArrayToPromptChoices(arr) {
    const out = [];
    arr.forEach((item) => {
        out.push({ title: item, value: item });
    });
    return out;
}
exports.stringArrayToPromptChoices = stringArrayToPromptChoices;
function promptTextName(name, message, initial) {
    return {
        type: "text",
        name: name,
        message: message,
        initial: initial || "",
        format: trimInput,
        validate: (input) => {
            return /^[a-z0-9][a-z0-9/\/_-]{1,62}[a-z0-9]$/i.test(input);
        },
    };
}
exports.promptTextName = promptTextName;
function promptTextPath(name, message, initial) {
    return {
        type: "text",
        name: name,
        message: message,
        initial: initial || "/",
        format: trimInput,
    };
}
exports.promptTextPath = promptTextPath;
function promptTextDescription(name, message, initial) {
    return {
        type: "text",
        name: name,
        message: message,
        initial: initial || "",
        format: trimInput,
    };
}
exports.promptTextDescription = promptTextDescription;
function promptSelect(name, message, choices, initial) {
    const obj = {
        type: "select",
        name: name,
        message: message,
        choices: choices,
    };
    if (initial !== undefined) {
        obj.initial = initial || 0;
    }
    return obj;
}
exports.promptSelect = promptSelect;
function promptConfirm(name, message, initial = false) {
    return {
        type: "confirm",
        name: name,
        message: message,
        initial: initial,
    };
}
exports.promptConfirm = promptConfirm;
function promptList(name, message) {
    return {
        type: "list",
        name: name,
        message: message,
        separator: " ",
        initial: "",
        validate: function (input) {
            return /^[A-Z0-9 -_]*$/i.test(input);
        },
    };
}
exports.promptList = promptList;
//# sourceMappingURL=cli-helper.js.map