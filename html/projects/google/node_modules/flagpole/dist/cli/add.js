"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_helper_1 = require("./cli-helper");
const cli_1 = require("./cli");
const prompts = require("prompts");
const typesOfTest = [
    { title: "HTML Page", value: "html" },
    {
        title: "REST API (JSON Format)",
        value: "json",
    },
    {
        title: "Browser (Puppeteer)",
        value: "browser",
    },
];
const canAdd = ["suite", "scenario", "env", "tag"];
function addSuite() {
    return __awaiter(this, void 0, void 0, function* () {
        cli_helper_1.printSubheader("Add New Suite");
        if (!cli_1.Cli.config.isValid()) {
            cli_1.Cli.log("Config file is invalid.");
            cli_1.Cli.exit(1);
        }
        const standardQuestions = yield prompts([
            cli_helper_1.promptTextName("suiteName", "Name of Suite", cli_1.Cli.commandArg2 || "smoke"),
            cli_helper_1.promptTextDescription("suiteDescription", "Description of Suite", "Basic Smoke Test of Site"),
            cli_helper_1.promptTextDescription("scenarioDescription", "First Scenario", "Homepage Loads"),
            cli_helper_1.promptSelect("type", "What type of test is this scenario?", typesOfTest, 0),
            cli_helper_1.promptTextPath("scenarioPath", "Scenario Start Path", "/"),
            cli_helper_1.promptList("tags", "Add Tags (Optional, Space Delimited)"),
        ]);
        cli_1.Cli.log("");
        yield cli_1.Cli.addSuite({
            name: standardQuestions.suiteName,
            description: standardQuestions.suiteDescription,
            tags: standardQuestions.tags,
        }, {
            description: standardQuestions.scenarioDescription,
            type: standardQuestions.type,
            path: standardQuestions.scenarioPath,
        });
        cli_1.Cli.log("Created new test suite.");
        cli_1.Cli.list([
            "Suite file created: " + standardQuestions.suiteName,
            "Scenario added: " + standardQuestions.scenarioDescription,
            "Config file updated",
        ]);
        cli_1.Cli.log("");
        cli_1.Cli.exit(0);
    });
}
function addScenario() {
    return __awaiter(this, void 0, void 0, function* () {
        cli_helper_1.printSubheader("Add New Scenaio");
        const suites = cli_helper_1.stringArrayToPromptChoices(cli_1.Cli.config.getSuiteNames().sort());
        if (suites.length == 0) {
            cli_1.Cli.log("");
            cli_1.Cli.log("You have not created any test suites yet. You should do that first.");
            cli_1.Cli.log("");
            cli_1.Cli.log("To add a test suite:");
            cli_1.Cli.log("flagpole add suite");
            cli_1.Cli.log("");
            cli_1.Cli.exit(1);
        }
        const responses = yield prompts([
            cli_helper_1.promptSelect("suite", "What suite do you want to add it to?", suites),
            cli_helper_1.promptSelect("type", "What type of test is this scenario?", typesOfTest, 0),
            cli_helper_1.promptTextDescription("scenarioDescription", "Description of Scenario", "Some Other Page Loads"),
            cli_helper_1.promptTextPath("scenarioPath", "Scenario Start Path", "/some-other-page"),
        ]);
        const suite = cli_1.Cli.config.suites[responses.suite];
        if (!suite) {
            cli_1.Cli.log(`Invalid suite: ${responses.suite}`);
            cli_1.Cli.log("");
            cli_1.Cli.exit(1);
        }
        yield cli_1.Cli.addScenario(suite, {
            description: responses.scenarioDescription,
            path: responses.scenarioPath,
            type: responses.type,
        });
        cli_1.Cli.log("Appended new scenario to suite:");
        cli_1.Cli.log(suite.getSourcePath());
        cli_1.Cli.log("");
        cli_1.Cli.log("Scenario added to that suite:");
        cli_1.Cli.log(responses.scenarioDescription);
        cli_1.Cli.log("");
        cli_1.Cli.exit(0);
    });
}
function addEnv() {
    return __awaiter(this, void 0, void 0, function* () {
        cli_helper_1.printSubheader("Add New Environment");
        const responses = yield prompts([
            {
                type: "text",
                name: "name",
                message: "What do you want to call the environment?",
                initial: cli_1.Cli.commandArg2 || "",
                validate: function (input) {
                    return /^[a-z0-9]{1,12}$/i.test(input);
                },
            },
            {
                type: "text",
                name: "defaultDomain",
                message: "Default Domain (optional)",
                format: cli_helper_1.trimInput,
            },
        ]);
        cli_1.Cli.config.addEnvironment({
            name: responses.name,
            defaultDomain: responses.defaultDomain,
        });
        yield cli_1.Cli.config.save();
        cli_1.Cli.log("Added new environment.");
        cli_1.Cli.list(["Config file updated"]);
        cli_1.Cli.log("");
        cli_1.Cli.exit(0);
    });
}
function addTag() {
    return __awaiter(this, void 0, void 0, function* () {
        const responses = yield prompts([
            {
                type: "text",
                name: "tag",
                message: "Tag to Add",
                validate: (tag) => {
                    return /^[a-z][a-z0-9_-][a-z0-0]+$/i.test(tag)
                        ? true
                        : "Tag should be a single alpha-numeric word";
                },
                format: cli_helper_1.trimInput,
            },
            {
                type: "multiselect",
                name: "suites",
                min: 1,
                message: "Suites to apply it to",
                choices: cli_helper_1.stringArrayToPromptChoices(cli_1.Cli.config.getSuiteNames().sort()),
            },
        ]);
        responses.suites.forEach((suiteName) => {
            cli_1.Cli.config.suites[suiteName].addTag(responses.tag);
        });
        cli_1.Cli.config.save();
    });
}
function add() {
    return __awaiter(this, void 0, void 0, function* () {
        cli_1.Cli.hideBanner = true;
        cli_helper_1.printHeader();
        let type = cli_1.Cli.commandArg || "";
        if (!canAdd.includes(type)) {
            type = (yield prompts({
                type: "select",
                name: "thingToAdd",
                message: "What do you want to add?",
                choices: [
                    { value: "suite", title: "Suite" },
                    { value: "scenario", title: "Scenario" },
                    { value: "env", title: "Environment" },
                    { value: "tag", title: "Tag" },
                ],
            })).thingToAdd;
        }
        if (type == "scenario") {
            addScenario();
        }
        else if (type == "env") {
            addEnv();
        }
        else if (type == "tag") {
            addTag();
        }
        else {
            addSuite();
        }
    });
}
exports.add = add;
//# sourceMappingURL=add.js.map