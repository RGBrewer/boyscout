"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const response_1 = require("./response");
const enums_1 = require("./enums");
class ResourceResponse extends response_1.ProtoResponse {
    get responseType() {
        return enums_1.ResponseType.resource;
    }
    get responseTypeName() {
        return 'Resource';
    }
    init(httpResponse) {
        super.init(httpResponse);
        this.context.assert(this.statusCode).between(200, 299);
    }
    evaluate(context, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Evaluate does not support generic resources.');
        });
    }
    find(path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Generic Response does not yet support select');
        });
    }
    findAll(path) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Generic Response does not yet support selectAll');
        });
    }
}
exports.ResourceResponse = ResourceResponse;
//# sourceMappingURL=resourceresponse.js.map